// Code generated by mockery v2.52.3. DO NOT EDIT.

package employee

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepositoryMock is an autogenerated mock type for the EmployeeRepositoryMock type
type EmployeeRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: newEmployee
func (_m *EmployeeRepositoryMock) Create(newEmployee models.Employee) (*models.Employee, error) {
	ret := _m.Called(newEmployee)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Employee) (*models.Employee, error)); ok {
		return rf(newEmployee)
	}
	if rf, ok := ret.Get(0).(func(models.Employee) *models.Employee); ok {
		r0 = rf(newEmployee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Employee) error); ok {
		r1 = rf(newEmployee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *EmployeeRepositoryMock) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCardNumberID provides a mock function with given fields: cardNumberID
func (_m *EmployeeRepositoryMock) FindByCardNumberID(cardNumberID string) (*models.Employee, error) {
	ret := _m.Called(cardNumberID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCardNumberID")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Employee, error)); ok {
		return rf(cardNumberID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Employee); ok {
		r0 = rf(cardNumberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cardNumberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with no fields
func (_m *EmployeeRepositoryMock) GetAll() (map[int]models.Employee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[int]models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[int]models.Employee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[int]models.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *EmployeeRepositoryMock) GetById(id int) (*models.Employee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Employee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, request
func (_m *EmployeeRepositoryMock) Update(id int, request *models.Employee) error {
	ret := _m.Called(id, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *models.Employee) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmployeeRepositoryMock creates a new instance of EmployeeRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepositoryMock {
	mock := &EmployeeRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
