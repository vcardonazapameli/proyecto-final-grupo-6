// Code generated by mockery v2.52.3. DO NOT EDIT.

package productbatch

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductBatchRepositoryMock is an autogenerated mock type for the ProductBatchRepositoryMock type
type ProductBatchRepositoryMock struct {
	mock.Mock
}

// BatchNumberExists provides a mock function with given fields: batchNumber
func (_m *ProductBatchRepositoryMock) BatchNumberExists(batchNumber string) bool {
	ret := _m.Called(batchNumber)

	if len(ret) == 0 {
		panic("no return value specified for BatchNumberExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(batchNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsByID provides a mock function with given fields: id
func (_m *ProductBatchRepositoryMock) ExistsByID(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: pb
func (_m *ProductBatchRepositoryMock) Save(pb *models.ProductBatchResponse) error {
	ret := _m.Called(pb)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ProductBatchResponse) error); ok {
		r0 = rf(pb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductBatchRepositoryMock creates a new instance of ProductBatchRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductBatchRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductBatchRepositoryMock {
	mock := &ProductBatchRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
