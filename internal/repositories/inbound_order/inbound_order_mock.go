// Code generated by mockery v2.52.3. DO NOT EDIT.

package inbound_order

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// InboundOrderRepositoryMock is an autogenerated mock type for the InboundOrderRepositoryMock type
type InboundOrderRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *InboundOrderRepositoryMock) Create(request models.InboundOrder) (*models.InboundOrder, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.InboundOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(models.InboundOrder) (*models.InboundOrder, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(models.InboundOrder) *models.InboundOrder); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.InboundOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(models.InboundOrder) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistOrderNumber provides a mock function with given fields: orderNumber
func (_m *InboundOrderRepositoryMock) ExistOrderNumber(orderNumber string) (bool, error) {
	ret := _m.Called(orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for ExistOrderNumber")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(orderNumber)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(orderNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReport provides a mock function with no fields
func (_m *InboundOrderRepositoryMock) GetAllReport() ([]models.EmployeeWithOrders, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllReport")
	}

	var r0 []models.EmployeeWithOrders
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.EmployeeWithOrders, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.EmployeeWithOrders); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.EmployeeWithOrders)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportByEmployeeID provides a mock function with given fields: id
func (_m *InboundOrderRepositoryMock) GetReportByEmployeeID(id int) (*models.EmployeeWithOrders, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReportByEmployeeID")
	}

	var r0 *models.EmployeeWithOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.EmployeeWithOrders, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.EmployeeWithOrders); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmployeeWithOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInboundOrderRepositoryMock creates a new instance of InboundOrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInboundOrderRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *InboundOrderRepositoryMock {
	mock := &InboundOrderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
