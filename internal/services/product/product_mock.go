// Code generated by mockery v2.52.3. DO NOT EDIT.

package product

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductServiceMock is an autogenerated mock type for the ProductServiceMock type
type ProductServiceMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ProductServiceMock) Create(_a0 models.ProductDocRequest) (*models.ProductDocResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.ProductDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ProductDocRequest) (*models.ProductDocResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.ProductDocRequest) *models.ProductDocResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ProductDocRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *ProductServiceMock) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *ProductServiceMock) GetAll() ([]models.ProductDocResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.ProductDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.ProductDocResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.ProductDocResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *ProductServiceMock) GetById(_a0 int) (*models.ProductDocResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.ProductDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.ProductDocResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.ProductDocResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductRecords provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProductServiceMock) GetProductRecords(_a0 *int, _a1 *int, _a2 *string) ([]models.ProductRecordByProductResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetProductRecords")
	}

	var r0 []models.ProductRecordByProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*int, *int, *string) ([]models.ProductRecordByProductResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(*int, *int, *string) []models.ProductRecordByProductResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductRecordByProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int, *int, *string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceMock) Update(_a0 int, _a1 models.ProductUpdateDocRequest) (*models.ProductDocResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.ProductDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.ProductUpdateDocRequest) (*models.ProductDocResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, models.ProductUpdateDocRequest) *models.ProductDocResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.ProductUpdateDocRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductService creates a new instance of ProductServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceMock {
	mock := &ProductServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
