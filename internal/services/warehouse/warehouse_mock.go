// Code generated by mockery v2.52.3. DO NOT EDIT.

package warehouse

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// WarehouseServiceMock is an autogenerated mock type for the WarehouseServiceMock type
type WarehouseServiceMock struct {
	mock.Mock
}

// CreateWarehouse provides a mock function with given fields: _a0
func (_m *WarehouseServiceMock) CreateWarehouse(_a0 models.WarehouseDocRequest) (*models.WarehouseDocResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateWarehouse")
	}

	var r0 *models.WarehouseDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.WarehouseDocRequest) (*models.WarehouseDocResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.WarehouseDocRequest) *models.WarehouseDocResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WarehouseDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(models.WarehouseDocRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWarehouse provides a mock function with given fields: _a0
func (_m *WarehouseServiceMock) DeleteWarehouse(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWarehouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *WarehouseServiceMock) GetAll() ([]models.WarehouseDocResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.WarehouseDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.WarehouseDocResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.WarehouseDocResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WarehouseDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *WarehouseServiceMock) GetById(_a0 int) (*models.WarehouseDocResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.WarehouseDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.WarehouseDocResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.WarehouseDocResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WarehouseDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWarehouse provides a mock function with given fields: _a0, _a1
func (_m *WarehouseServiceMock) UpdateWarehouse(_a0 int, _a1 models.WarehouseUpdateDocRequest) (*models.WarehouseUpdateDocResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWarehouse")
	}

	var r0 *models.WarehouseUpdateDocResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.WarehouseUpdateDocRequest) (*models.WarehouseUpdateDocResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, models.WarehouseUpdateDocRequest) *models.WarehouseUpdateDocResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WarehouseUpdateDocResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.WarehouseUpdateDocRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWarehouseService creates a new instance of WarehouseServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWarehouseServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WarehouseServiceMock {
	mock := &WarehouseServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
