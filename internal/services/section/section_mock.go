package section

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SectionService is an autogenerated mock type for the SectionService type
type SectionServiceMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *SectionServiceMock) Create(_a0 models.Section) (models.Section, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Section) (models.Section, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Section) models.Section); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Section)
	}

	if rf, ok := ret.Get(1).(func(models.Section) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *SectionServiceMock) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *SectionServiceMock) GetAll() (map[int]models.Section, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[int]models.Section
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[int]models.Section, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[int]models.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]models.Section)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *SectionServiceMock) GetByID(id int) (models.Section, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Section, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) models.Section); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Section)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSectionReports provides a mock function with given fields: sectionId
func (_m *SectionServiceMock) GetSectionReports(sectionId int) ([]models.SectionReport, error) {
	ret := _m.Called(sectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSectionReports")
	}

	var r0 []models.SectionReport
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.SectionReport, error)); ok {
		return rf(sectionId)
	}
	if rf, ok := ret.Get(0).(func(int) []models.SectionReport); ok {
		r0 = rf(sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SectionReport)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, sectionDto
func (_m *SectionServiceMock) Update(id int, sectionDto models.UpdateSectionDto) (models.Section, error) {
	ret := _m.Called(id, sectionDto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.UpdateSectionDto) (models.Section, error)); ok {
		return rf(id, sectionDto)
	}
	if rf, ok := ret.Get(0).(func(int, models.UpdateSectionDto) models.Section); ok {
		r0 = rf(id, sectionDto)
	} else {
		r0 = ret.Get(0).(models.Section)
	}

	if rf, ok := ret.Get(1).(func(int, models.UpdateSectionDto) error); ok {
		r1 = rf(id, sectionDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSectionService creates a new instance of SectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSectionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SectionServiceMock {
	mock := &SectionServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
