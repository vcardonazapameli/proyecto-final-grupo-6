// Code generated by mockery v2.52.3. DO NOT EDIT.

package employee

import (
	models "github.com/arieleon_meli/proyecto-final-grupo-6/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeServiceMock is an autogenerated mock type for the EmployeeServiceMock type
type EmployeeServiceMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *EmployeeServiceMock) Create(request models.RequestEmployee) (*models.EmployeeDoc, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.EmployeeDoc
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RequestEmployee) (*models.EmployeeDoc, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(models.RequestEmployee) *models.EmployeeDoc); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmployeeDoc)
		}
	}

	if rf, ok := ret.Get(1).(func(models.RequestEmployee) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *EmployeeServiceMock) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *EmployeeServiceMock) GetAll() ([]models.EmployeeDoc, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.EmployeeDoc
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.EmployeeDoc, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.EmployeeDoc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.EmployeeDoc)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *EmployeeServiceMock) GetById(id int) (*models.EmployeeDoc, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.EmployeeDoc
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.EmployeeDoc, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.EmployeeDoc); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmployeeDoc)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportInboundOrders provides a mock function with given fields: employeeID
func (_m *EmployeeServiceMock) GetReportInboundOrders(employeeID *int) (interface{}, error) {
	ret := _m.Called(employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetReportInboundOrders")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*int) (interface{}, error)); ok {
		return rf(employeeID)
	}
	if rf, ok := ret.Get(0).(func(*int) interface{}); ok {
		r0 = rf(employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*int) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, request
func (_m *EmployeeServiceMock) Update(id int, request models.UpdateEmployee) (*models.EmployeeDoc, error) {
	ret := _m.Called(id, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.EmployeeDoc
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.UpdateEmployee) (*models.EmployeeDoc, error)); ok {
		return rf(id, request)
	}
	if rf, ok := ret.Get(0).(func(int, models.UpdateEmployee) *models.EmployeeDoc); ok {
		r0 = rf(id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmployeeDoc)
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.UpdateEmployee) error); ok {
		r1 = rf(id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeServiceMock creates a new instance of EmployeeServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeServiceMock {
	mock := &EmployeeServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
